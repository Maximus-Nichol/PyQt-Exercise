# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'countryPickerGUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QThread, pyqtSignal
from PyQt5.QtGui import QPixmap
from urllib.request import urlopen

import requests
import threading
import argparse


base_url = "https://www.apicountries.com/countries"

class Ui_MainWindow(object):

    ## Constructor
    def __init__(self, selected_country=None):
        ## stroes country to preselect from command line and holds country flag URL
        self.selected_country = selected_country
        self.flag_urls = {}
    
    def setupUi(self, MainWindow):
        self.flag_urls = {}

        ## Main Window setup
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(265, 357)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        ## Country selection combobox
        self.comboB1 = QtWidgets.QComboBox(self.centralwidget)
        self.comboB1.setGeometry(QtCore.QRect(30, 60, 211, 31))
        self.comboB1.setCurrentText("")
        self.comboB1.setObjectName("comboB1")

        ## Label that changes based on country selected
        self.label1 = QtWidgets.QLabel(self.centralwidget)
        self.label1.setGeometry(QtCore.QRect(30, 20, 61, 31))
        self.label1.setObjectName("label1")

        ## Label that changes flag based on country selected
        self.imageLabel1 = QtWidgets.QLabel(self.centralwidget)
        self.imageLabel1.setGeometry(QtCore.QRect(180, 20, 61, 31))
        self.imageLabel1.setScaledContents(True)
        self.imageLabel1.setObjectName("imageLabel1")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 265, 21))
        self.menubar.setObjectName("menubar")


        self.menuCountries = QtWidgets.QMenu(self.menubar)
        self.menuCountries.setObjectName("menuCountries")
        self.menuInfo = QtWidgets.QMenu(self.menubar)
        self.menuInfo.setObjectName("menuInfo")

        
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        
        self.menubar.addAction(self.menuCountries.menuAction())
        self.menubar.addAction(self.menuInfo.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        ## Creates background thread for network request
        self.worker = WorkerThread()
        self.worker.countries_ready.connect(self.update_countries)
        self.worker.start()
        
        ## Flag update
        self.comboB1.currentIndexChanged.connect(self.update_display)

        
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label1.setText(_translate("MainWindow", "Selected:"))
        self.imageLabel1.setText(_translate("MainWindow", "---"))
        self.menuCountries.setStatusTip(_translate("MainWindow", "Select a country"))
        self.menuCountries.setTitle(_translate("MainWindow", "Countries"))
        self.menuInfo.setStatusTip(_translate("MainWindow", "Exercise information"))
        self.menuInfo.setTitle(_translate("MainWindow", "Info"))

    ## Logic for when countries and their flags are ready from the background thread
    def update_countries(self, country_names, flags):
        self.flag_urls = flags
        self.comboB1.addItems(country_names)

        ## Checks if a country was selected with --select and is in the list
        if self.selected_country and self.selected_country in country_names:
            index = self.comboB1.findText(self.selected_country)
            if index >= 0:
                self.comboB1.setCurrentIndex(index)
        
    ## Logic for label updates, and responsible for downloading the image data and then converting to QPixmap
    def update_display(self):
        country = self.comboB1.currentText()

        ## Updates label1 to show selected country
        self.label1.setText(f"Selected: {country}")
        self.label1.adjustSize()
        
        if country in self.flag_urls:
            data = urlopen(self.flag_urls[country]).read()
            pixmap = QPixmap()
            pixmap.loadFromData(data)
            self.imageLabel1.setPixmap(pixmap)
        else:
            print(f"Failed to load image for {country}: {e}")

    def menuClicked(self, text):
        self.label1.setText(text)
        self.label1.adjustSize()
        
    def comboPressed(self):
        print(self.comboB1.currentText())


## Logic for thread that fetches the country names and their flag URLs from API
class WorkerThread(QThread):
    countries_ready = QtCore.pyqtSignal(list, dict)
    def run(self):
        response = requests.get(base_url)
        print(response)

        if response.status_code == 200:
            country_data = response.json()
            country_names = sorted([country["name"] for country in country_data])
            country_flags = {country["name"]: country["flags"]["png"] for country in country_data}
            self.countries_ready.emit(country_names, country_flags)
        else:
            print(f"Failed to retrieve {response.status_code}")
            self.countries_ready.emit([])
        

if __name__ == "__main__":
    import sys
    import argparse
    from PyQt5 import QtWidgets

    ## Parser to preselect a country
    parser = argparse.ArgumentParser(description="Country Picker with optional default selection.")
    parser.add_argument("--select", type=str, help="Pre-select a country."
    )
    args = parser.parse_args()
    
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow(selected_country=args.select)
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
    
